#!/usr/bin/python -tt

# Growl notification for new mail, v1.1.2
# Copyright (c) 2012-4, John Morrissey <jwm@horde.net>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of Version 2 of the GNU General Public License as
# published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# Use this script with a procmail recipe like:
#
# :0c
# |$HOME/.bin/growl-mail
#
# to send Growl notifications to a remote Mac when you receive new mail.

# For Growl 1.3 and newer, requires the gntp Python module
#   https://github.com/kfdm/gntp
#
# For older versions of Growl, requires the netgrowl Python module
#   http://the.taoofmac.com/space/projects/netgrowl

HOSTS = [
	'some-remote-host',
]
PASSWORD = ''
HTML_TO_TEXT = ['lynx', '-stdin', '-dump', '-force_html']

import email
import socket
import subprocess
import sys

def notify_gntp(title, desc):
	for host in HOSTS:
		growl = gntp.notifier.GrowlNotifier(
			notifications=['Message'], defaultNotifications=['Message'],
			applicationName='mail', hostname=host, password=PASSWORD, port=23053)
		try:
			growl.register()
			growl.notify(noteType='Message', title=title, description=desc)
		except (socket.error, socket.timeout, gntp.errors.NetworkError):
			pass

def notify_netgrowl(title, desc):
	for host in HOSTS:
		addr = (host, netgrowl.GROWL_UDP_PORT)
		sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

		p = netgrowl.GrowlRegistrationPacket(application='mail', password=PASSWORD)
		p.addNotification()
		sock.sendto(p.payload(), addr)

		p = netgrowl.GrowlNotificationPacket(password=PASSWORD, application='mail',
			title=title, description=desc)
		sock.sendto(p.payload(), addr)

def useful_text_from_message(payload):
	if payload.is_multipart():
		payloads = payload.get_payload()
	else:
		payloads = [payload]

	text_content = []
	for payload in payloads:
		if payload.is_multipart():
			text_content.extend(useful_text_from_message(payload))
			continue

		content_type = '%s/%s' % (
			payload.get_content_maintype(),
			payload.get_content_subtype(),
		)
		if content_type in ['text/plain', 'multipart/signed']:
			charset = payload.get_content_charset()
			if not charset:
				charset = 'UTF-8'

			text_content.append(payload.get_payload(decode=True).
				decode(charset))
		elif content_type == 'text/html' and HTML_TO_TEXT:
			proc = subprocess.Popen(HTML_TO_TEXT,
				stdin=subprocess.PIPE, stdout=subprocess.PIPE,
				stderr=subprocess.STDOUT)
			headers, body = str(payload).split('\n\n', 1)
			text_content.append(proc.communicate(body)[0])
	return text_content	

msg = email.message_from_file(sys.stdin)
payload = '\n'.join(useful_text_from_message(msg))

payload = payload.replace('\r', '')
desc = '%s\n%s' % (
	msg['From'],
	'\n'.join(payload.split('\n')[0:10]),
)

args = [msg.get('Subject', '[No Subject]'), desc]
if not args[0]:
	args[0] = '[No Subject]'

try:
	import netgrowl
	notify_netgrowl(*args)
except ImportError:
	# List the most modern notification method last (the one we expect
	# most people to be running), so if its Python bindings aren't present,
	# the stack trace will reference this module.
	import gntp.notifier
	notify_gntp(*args)
